# -------------------------------------------------------------
# Reusable Terraform Release Workflow
#
# Purpose:
#   Automates validation, tagging, archiving, and release of Terraform projects.
#   Designed to be called from other workflows using 'workflow_call'.
#
# Usage Example (caller workflow):
#
#   jobs:
#     call-terraform-release:
#       uses: mgill-statrad/github-actions-library/.github/workflows/terraform.yml@main
#       with:
#         terraform_version: '1.5.0'
#         terraform_directory: './terraform'
#         archive_prefix: 'terraform'
#         release_name: 'Terraform Release'
#         release_body: |
#           ## Custom Release Body
#           ...
#         tag_prefix: 'v'
#
# Inputs:
#   - terraform_version: Version of Terraform to use (default: 1.5.0)
#   - terraform_directory: Directory containing Terraform files (default: ./terraform)
#   - archive_prefix: Prefix for release archive name (default: terraform)
#   - release_name: Name for the release (default: Terraform Release)
#   - release_body: Markdown body for the release notes
#   - tag_prefix: Prefix for git tag (default: v)
#
# Outputs: None
# -------------------------------------------------------------
name: reusable-terraform-release

on:
  workflow_call:
    inputs:
      terraform_version:
        required: false
        type: string
        default: '1.5.0'
      terraform_directory:
        required: false
        type: string
        default: './terraform'
      archive_prefix:
        required: false
        type: string
        default: 'terraform'
      release_name:
        required: false
        type: string
        default: 'Terraform Release'
      release_body:
        required: false
        type: string
        default: |
          ## Terraform Deployment Package
          This release contains the complete Terraform configuration for deployment.
          ### Usage:
          1. Download and extract the archive
          2. Copy `terraform.tfvars.example` to `terraform.tfvars`
          3. Update variables in `terraform.tfvars` for your environment
          4. Run `terraform init`, `terraform plan`, and `terraform apply`
          ### Requirements:
          - Terraform >= 1.0
          For detailed instructions, see the README.md file in the archive.
          **Auto-generated from commit:** ${{ github.sha }}
      tag_prefix:
        required: false
        type: string
        default: 'v'

jobs:
  build:
    if: >-
      (github.event_name == 'pull_request' &&
        (github.event.action == 'opened' || github.event.action == 'reopened' || github.event.action == 'synchronize'))
    runs-on: ubuntu-latest 
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform_version }}
      
    - name: Terraform Init
      run: terraform init -backend=false
      working-directory: ${{ inputs.terraform_directory }}
      
    - name: Terraform Validate
      run: terraform validate
      working-directory: ${{ inputs.terraform_directory }}

    - name: Comment PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'âœ… Terraform validation completed successfully! This PR is ready for review.'
          })

  release:
    if: >-
      (github.event_name == 'push' && github.ref == 'refs/heads/master') ||
      (github.event_name == 'pull_request' && github.event.action == 'closed')
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform_version }}
      
    - name: Terraform Init
      run: terraform init -backend=false
      working-directory: ${{ inputs.terraform_directory }}
      
    - name: Generate version tag
      id: version
      run: |
        git fetch --tags "https://github.com/${{ github.repository }}.git"
        TAG_PREFIX="${{ inputs.tag_prefix }}"
        LAST_TAG=$(git ls-remote --tags "https://github.com/${{ github.repository }}.git" | awk -F/ '/refs\/tags\// {print $3}' | grep "^${TAG_PREFIX}" | sort -V | tail -n1)
        if [ -z "$LAST_TAG" ]; then
          LAST_TAG="${TAG_PREFIX}0.0.0"
        fi
        VERSION="${LAST_TAG#"$TAG_PREFIX"}"
        IFS='.' read -r major minor patch <<< "$VERSION"
        NEW_PATCH=$((patch + 1))
        NEW_TAG="${TAG_PREFIX}${major}.${minor}.${NEW_PATCH}"
        echo "tag_name=$NEW_TAG" >> "$GITHUB_OUTPUT"
        echo "release_name=${{ inputs.release_name }} $NEW_TAG" >> "$GITHUB_OUTPUT"

    - name: Create and push tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ steps.version.outputs.tag_name }}
        git push origin ${{ steps.version.outputs.tag_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create terraform directory archive
      run: |
        cd ${{ inputs.terraform_directory }}
        zip -r ../${{ inputs.archive_prefix }}-${{ steps.version.outputs.tag_name }}.zip .
        cd ..
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        release_name: ${{ steps.version.outputs.release_name }}
        body: ${{ inputs.release_body }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ inputs.archive_prefix }}-${{ steps.version.outputs.tag_name }}.zip
        asset_name: ${{ inputs.archive_prefix }}-${{ steps.version.outputs.tag_name }}.zip
        asset_content_type: application/zip
